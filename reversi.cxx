// generated by Fast Light User Interface Designer (fluid) version 1.0302

#include "reversi.h"

void ReversiUI::cb__i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb__i(o,v);
}

void ReversiUI::cb_1_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_1(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_1_i(o,v);
}

void ReversiUI::cb_2_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_2(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_2_i(o,v);
}

void ReversiUI::cb_3_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_3(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_3_i(o,v);
}

void ReversiUI::cb_4_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_4(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_4_i(o,v);
}

void ReversiUI::cb_5_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_5(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_5_i(o,v);
}

void ReversiUI::cb_6_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_6(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_6_i(o,v);
}

void ReversiUI::cb_7_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_7(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_7_i(o,v);
}

void ReversiUI::cb_8_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_8(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_8_i(o,v);
}

void ReversiUI::cb_9_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_9(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_9_i(o,v);
}

void ReversiUI::cb_a_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_a(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_a_i(o,v);
}

void ReversiUI::cb_b_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_b(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_b_i(o,v);
}

void ReversiUI::cb_c_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_c(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_c_i(o,v);
}

void ReversiUI::cb_d_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_d(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_d_i(o,v);
}

void ReversiUI::cb_e_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_e(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_e_i(o,v);
}

void ReversiUI::cb_f_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_f(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_f_i(o,v);
}

void ReversiUI::cb_10_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_10(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_10_i(o,v);
}

void ReversiUI::cb_11_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_11(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_11_i(o,v);
}

void ReversiUI::cb_12_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_12(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_12_i(o,v);
}

void ReversiUI::cb_13_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_13(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_13_i(o,v);
}

void ReversiUI::cb_14_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_14(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_14_i(o,v);
}

void ReversiUI::cb_15_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_15(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_15_i(o,v);
}

void ReversiUI::cb_16_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_16(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_16_i(o,v);
}

void ReversiUI::cb_17_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_17(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_17_i(o,v);
}

void ReversiUI::cb_18_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_18(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_18_i(o,v);
}

void ReversiUI::cb_19_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_19(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_19_i(o,v);
}

void ReversiUI::cb_1a_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_1a(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_1a_i(o,v);
}

void ReversiUI::cb_1b_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_1b(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_1b_i(o,v);
}

void ReversiUI::cb_1c_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_1c(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_1c_i(o,v);
}

void ReversiUI::cb_1d_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_1d(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_1d_i(o,v);
}

void ReversiUI::cb_1e_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_1e(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_1e_i(o,v);
}

void ReversiUI::cb_1f_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_1f(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_1f_i(o,v);
}

void ReversiUI::cb_20_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_20(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_20_i(o,v);
}

void ReversiUI::cb_21_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_21(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_21_i(o,v);
}

void ReversiUI::cb_22_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_22(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_22_i(o,v);
}

void ReversiUI::cb_23_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_23(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_23_i(o,v);
}

void ReversiUI::cb_24_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_24(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_24_i(o,v);
}

void ReversiUI::cb_25_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_25(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_25_i(o,v);
}

void ReversiUI::cb_26_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_26(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_26_i(o,v);
}

void ReversiUI::cb_27_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_27(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_27_i(o,v);
}

void ReversiUI::cb_28_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_28(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_28_i(o,v);
}

void ReversiUI::cb_29_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_29(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_29_i(o,v);
}

void ReversiUI::cb_2a_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_2a(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_2a_i(o,v);
}

void ReversiUI::cb_2b_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_2b(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_2b_i(o,v);
}

void ReversiUI::cb_2c_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_2c(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_2c_i(o,v);
}

void ReversiUI::cb_2d_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_2d(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_2d_i(o,v);
}

void ReversiUI::cb_2e_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_2e(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_2e_i(o,v);
}

void ReversiUI::cb_2f_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_2f(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_2f_i(o,v);
}

void ReversiUI::cb_30_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_30(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_30_i(o,v);
}

void ReversiUI::cb_31_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_31(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_31_i(o,v);
}

void ReversiUI::cb_32_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_32(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_32_i(o,v);
}

void ReversiUI::cb_33_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_33(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_33_i(o,v);
}

void ReversiUI::cb_34_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_34(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_34_i(o,v);
}

void ReversiUI::cb_35_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_35(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_35_i(o,v);
}

void ReversiUI::cb_36_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_36(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_36_i(o,v);
}

void ReversiUI::cb_37_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_37(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_37_i(o,v);
}

void ReversiUI::cb_38_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_38(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_38_i(o,v);
}

void ReversiUI::cb_39_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_39(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_39_i(o,v);
}

void ReversiUI::cb_3a_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_3a(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_3a_i(o,v);
}

void ReversiUI::cb_3b_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_3b(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_3b_i(o,v);
}

void ReversiUI::cb_3c_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_3c(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_3c_i(o,v);
}

void ReversiUI::cb_3d_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_3d(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_3d_i(o,v);
}

void ReversiUI::cb_3e_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_3e(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_3e_i(o,v);
}

void ReversiUI::cb_3f_i(Fl_Button*, void* v) {
  int buttonNum = (int) v;
int x = buttonNum % 8;
int y = buttonNum / 8;
int r = y + 49;
int c = x + 65;
stringstream ss;
ss << (char)c << (char)r;
serv.sendStringToOtherAi(ss.str());
//write(g->server.connectID, ss.str().c_str(), ss.str().size());
//g->board.setState(WHITE, x, y);
}
void ReversiUI::cb_3f(Fl_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->parent()->user_data()))->cb_3f_i(o,v);
}

void ReversiUI::cb_Exit_i(Fl_Return_Button*, void*) {
  window->hide();
}
void ReversiUI::cb_Exit(Fl_Return_Button* o, void* v) {
  ((ReversiUI*)(o->parent()->user_data()))->cb_Exit_i(o,v);
}

void ReversiUI::cb_Human_i(Fl_Menu_*, void*) {
  startLocalGame();
}
void ReversiUI::cb_Human(Fl_Menu_* o, void* v) {
  ((ReversiUI*)(o->parent()->user_data()))->cb_Human_i(o,v);
}

Fl_Menu_Item ReversiUI::menu_[] = {
 {"Game", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Human-AI", 0,  (Fl_Callback*)ReversiUI::cb_Human, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"AI-AI", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

ReversiUI::ReversiUI(Game* game) {
  { window = new Fl_Double_Window(800, 615);
    window->user_data((void*)(this));
    { buttonGroup = new Fl_Group(30, 90, 410, 410, "Board");
      buttonGroup->box(FL_GTK_THIN_DOWN_BOX);
      { Fl_Button* o = new Fl_Button(40, 100, 40, 40);
        o->callback((Fl_Callback*)cb_);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(90, 100, 40, 40);
        o->callback((Fl_Callback*)cb_1);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(140, 100, 40, 40);
        o->callback((Fl_Callback*)cb_2);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(190, 100, 40, 40);
        o->callback((Fl_Callback*)cb_3);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(240, 100, 40, 40);
        o->callback((Fl_Callback*)cb_4);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(290, 100, 40, 40);
        o->callback((Fl_Callback*)cb_5);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(340, 100, 40, 40);
        o->callback((Fl_Callback*)cb_6);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(390, 100, 40, 40);
        o->callback((Fl_Callback*)cb_7);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(40, 150, 40, 40);
        o->callback((Fl_Callback*)cb_8);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(90, 150, 40, 40);
        o->callback((Fl_Callback*)cb_9);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(140, 150, 40, 40);
        o->callback((Fl_Callback*)cb_a);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(190, 150, 40, 40);
        o->callback((Fl_Callback*)cb_b);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(240, 150, 40, 40);
        o->callback((Fl_Callback*)cb_c);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(290, 150, 40, 40);
        o->callback((Fl_Callback*)cb_d);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(340, 150, 40, 40);
        o->callback((Fl_Callback*)cb_e);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(390, 150, 40, 40);
        o->callback((Fl_Callback*)cb_f);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(40, 200, 40, 40);
        o->callback((Fl_Callback*)cb_10);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(90, 200, 40, 40);
        o->callback((Fl_Callback*)cb_11);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(140, 200, 40, 40);
        o->callback((Fl_Callback*)cb_12);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(190, 200, 40, 40);
        o->callback((Fl_Callback*)cb_13);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(240, 200, 40, 40);
        o->callback((Fl_Callback*)cb_14);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(290, 200, 40, 40);
        o->callback((Fl_Callback*)cb_15);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(340, 200, 40, 40);
        o->callback((Fl_Callback*)cb_16);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(390, 200, 40, 40);
        o->callback((Fl_Callback*)cb_17);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(40, 250, 40, 40);
        o->callback((Fl_Callback*)cb_18);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(90, 250, 40, 40);
        o->callback((Fl_Callback*)cb_19);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(140, 250, 40, 40);
        o->callback((Fl_Callback*)cb_1a);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(190, 250, 40, 40);
        o->callback((Fl_Callback*)cb_1b);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(240, 250, 40, 40);
        o->callback((Fl_Callback*)cb_1c);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(290, 250, 40, 40);
        o->callback((Fl_Callback*)cb_1d);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(340, 250, 40, 40);
        o->callback((Fl_Callback*)cb_1e);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(390, 250, 40, 40);
        o->callback((Fl_Callback*)cb_1f);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(40, 300, 40, 40);
        o->callback((Fl_Callback*)cb_20);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(90, 300, 40, 40);
        o->callback((Fl_Callback*)cb_21);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(140, 300, 40, 40);
        o->callback((Fl_Callback*)cb_22);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(190, 300, 40, 40);
        o->callback((Fl_Callback*)cb_23);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(240, 300, 40, 40);
        o->callback((Fl_Callback*)cb_24);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(290, 300, 40, 40);
        o->callback((Fl_Callback*)cb_25);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(340, 300, 40, 40);
        o->callback((Fl_Callback*)cb_26);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(390, 300, 40, 40);
        o->callback((Fl_Callback*)cb_27);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(40, 350, 40, 40);
        o->callback((Fl_Callback*)cb_28);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(90, 350, 40, 40);
        o->callback((Fl_Callback*)cb_29);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(140, 350, 40, 40);
        o->callback((Fl_Callback*)cb_2a);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(190, 350, 40, 40);
        o->callback((Fl_Callback*)cb_2b);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(240, 350, 40, 40);
        o->callback((Fl_Callback*)cb_2c);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(290, 350, 40, 40);
        o->callback((Fl_Callback*)cb_2d);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(340, 350, 40, 40);
        o->callback((Fl_Callback*)cb_2e);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(390, 350, 40, 40);
        o->callback((Fl_Callback*)cb_2f);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(40, 400, 40, 40);
        o->callback((Fl_Callback*)cb_30);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(90, 400, 40, 40);
        o->callback((Fl_Callback*)cb_31);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(140, 400, 40, 40);
        o->callback((Fl_Callback*)cb_32);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(190, 400, 40, 40);
        o->callback((Fl_Callback*)cb_33);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(240, 400, 40, 40);
        o->callback((Fl_Callback*)cb_34);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(290, 400, 40, 40);
        o->callback((Fl_Callback*)cb_35);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(340, 400, 40, 40);
        o->callback((Fl_Callback*)cb_36);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(390, 400, 40, 40);
        o->callback((Fl_Callback*)cb_37);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(40, 450, 40, 40);
        o->callback((Fl_Callback*)cb_38);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(90, 450, 40, 40);
        o->callback((Fl_Callback*)cb_39);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(140, 450, 40, 40);
        o->callback((Fl_Callback*)cb_3a);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(190, 450, 40, 40);
        o->callback((Fl_Callback*)cb_3b);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(240, 450, 40, 40);
        o->callback((Fl_Callback*)cb_3c);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(290, 450, 40, 40);
        o->callback((Fl_Callback*)cb_3d);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(340, 450, 40, 40);
        o->callback((Fl_Callback*)cb_3e);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(390, 450, 40, 40);
        o->callback((Fl_Callback*)cb_3f);
      } // Fl_Button* o
      buttonGroup->end();
    } // Fl_Group* buttonGroup
    { Fl_Return_Button* o = new Fl_Return_Button(720, 590, 62, 15, "Exit");
      o->callback((Fl_Callback*)cb_Exit);
    } // Fl_Return_Button* o
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 800, 20);
      o->menu(menu_);
    } // Fl_Menu_Bar* o
    window->end();
  } // Fl_Double_Window* window
  g = game;
}

void ReversiUI::show(int portNum) {
  localGamePort = portNum;
  inGame = false;
  
  wImage = new Fl_PNG_Image("whitepiece.png");
  bImage = new Fl_PNG_Image("blackpiece.png");
  
  int numChildren = buttonGroup->children();
  for(int i = 0; i < numChildren; i++){
  	buttonGroup->child(i)->user_data((void*)i);
  }
  window->show();//argc, argv);
}

void ReversiUI::updateUI() {
  Board b = g->board;
  
  for(int i = 0; i < 8; i++){
  	for(int j = 0; j < 8; j++){
  		State s = b.getState(i,j);
  		Fl_PNG_Image* imgPtr = NULL;
  		switch(s){
  			case WHITE:
  				imgPtr = wImage;
  			break;
  			case BLACK:
  				imgPtr = bImage;
  			break;
  			default:
  				imgPtr = NULL;
  			break;
  		}
  		//buttonGroup->child(j*8 + i)->copy_label(val.c_str());
  		if(imgPtr != NULL){
  			buttonGroup->child(j*8 + i)->image(imgPtr);
  		}
  		else{
  			buttonGroup->child(j*8 + i)->deimage();
  		}
  		buttonGroup->child(j*8 + i)->redraw();
  		
  	}
  }
}

ReversiUI::~ReversiUI() {
  delete bImage;
  delete wImage;
}

void ReversiUI::startLocalGame() {
  inGame = true;
  serv.connectTo("127.0.0.1", localGamePort);
  serv.readStringFromOtherAi();
  serv.sendStringToOtherAi("HUMAN-AI");
  serv.readStringFromOtherAi();
}
